---
title: "Cross Compilation & Manual Remote Debugging"
---


:::{.callout-note}
This is written by a Manjaro user. 
The package names is a bit different for other distros.
If you know some package names in other distros, please use the repos GitHub issues page to tell me about it.
:::


## Cross Compiling the Binary

This is written in 2024.
Currently most desktop PCs/laptops are running x86_64 CPUs and when dealing with embedded Linux it's mostly some version of ARM.
That's what we're gonna set up the project for.

For a rust project `Cargo.toml` is the place for platform independent things, while `.cargo/config.toml` is for thins that are platform specific.
Place these lines in `.cargo/config.toml` inside of your Rust repository.
```{.toml}
[target.aarch64-unknown-linux-gnu]
linker = "aarch64-linux-gnu-gcc"
```

:::{.column-margin}
For the compilation to work you need the ARM tools installed. On manjaro this can be acquired with `pacman -S aarch64-linux-gnu-binutils aarch64-linux-gnu-gcc aarch64-linux-gnu-gdb aarch64-linux-gnu-glibc aarch64-linux-gnu-linux-api-headers`.

You may also need `aarch64-linux-gnu-pkg-config` from AUR.
:::
With this you should now be able to compile into an ARM binary with

```{.default}
$ cargo build --target=aarch64-unknown-linux-gnu
```

Verify that you have the binary, and check its size:

```{.default}
$ ls -lh target/aarch64-unknown-linux-gnu/debug/
```












## Preparing the Remote Debug Session

### On the Remote

If your using some sort of Ubuntu/Debian/Armbian systems then run

```{.default}
$ sudo apt install gdbserver openssh-server
```

### On the Host

A version of Gdb which can handle the binary format of your target platform is needed.
For Manjaro/Arch users it's available as `aarch64-linux-gnu-gdb`.












## Creating a Session

The numbers used here match the the example session in the image at the bottom of the page.

1. First the binary needs to get onto the remote:

```{.default}
$ scp target/aarch64-unknown-linux-gnu/debug/rust-proj user@10.23.34.62:~/
```

2. Then, in an ssh session to your remote machine, start a gdbserver session with the binary. 2000 is the port number.

```{.default}
$ gdbserver :2000 ~/rust-proj
```

3. Launch gdb at the host, using the version matching your binaries format. The option `--silent` removes the start-up message.

```{.default}
$ aarch64-linux-gnu-gdb target/aarch64-unknown-linux-gnu/debug/rust-proj --silent
```

4. Don't know what this is. Tried saying yes a few times, never seemed to work.

5. Set up a breakpoint.

6. Run to the breakpoint.

7. Note that the execution is happening on the remote machine. If you let the program run to the end you'll see the output of `uname -a`.

![This is Rachel. Look at her. She clearly knows things.](rachel-does-gdb.png){.lightbox}

