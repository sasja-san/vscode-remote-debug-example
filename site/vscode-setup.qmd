---
title: "VS Code Setup"
---


## VS Code Extensions

You don't need any of Microsofts Remote Development extensions.
Those are for working with source code that's on another machine.

The extensions you need are

:::{.column-margin}
You may be thinking "Why LLDB? I thought we were using GDB?".
GDB is essentially a hack and LLDB just happens to be compatible with that hack so, for our purposes, it's essentially the same thing.
:::

1. rust-analyzer (`rust-lang.rust-analyzer`)
2. CodeLLDB (`vadimcn.vscode-lldb`)












## Tasks

First you'll need commands which will build your program.
Inside the project this is the file `.vscode/tasks.json`:

:::{.column-margin}
The field `label` is the unique identifier for each, which is how dependency chains are handled in VS Code.
The six arguments match up with the script below.
:::

```{.json code-line-numbers="true"}
{{< include ../rust-proj/.vscode/tasks.json >}}
```












## GDB Server Launcher Script

The script below is called on line 32 and should be saved as `gdbserver-setup.sh` in the root of your project folder.
Don't forget to do `chmod u+x` on it^[I may have been stuck on this point a little longer than I'm comfortable admitting.] or you'll get permission denied errors.

```{.bash code-line-numbers="true"}
{{< include ../rust-proj/gdbserver-setup.sh >}}
```
From line 14 and 17 you may notice that there are som directories that need to exist on the remote:

```{.default}
$ cd ~ && mkdir bin && mkdir bin/debug
```













## Launchers


This is the file `.vscode/launch.json`:

```{.json code-line-numbers="true"}
{{< include ../rust-proj/.vscode/launch.json >}}
```





## Making Things Simpler

It can be quite annoying to have to enter the the remotes password three times for every debug session.

To get around this, use the command `ssh-copy-id` to install your public key onto the remote machine:

```{.default}
$ ssh-copy-id user@10.23.34.62
```

![](ssh-copy-id-success.png){.lightbox}

As it's said in the picture, try logging in to the machine with `ssh` again.
If it all worked out you should no longer need to input the password each time.