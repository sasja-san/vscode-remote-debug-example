---
title: "VS Code Setup"
---


## VS Code Extensions

You don't need any of Microsofts Remote Development extensions.
Those are for working with source code that's on another machine.

The extensions you need are

:::{.column-margin}
You may be thinking "Why LLDB? I thought we were using GDB?".
GDB is essentially a hack and LLDB just happens to be compatible with that hack so, for our purposes, it's essentially the same thing.
:::

1. rust-analyzer (`rust-lang.rust-analyzer`)
2. CodeLLDB (`vadimcn.vscode-lldb`)

## Tasks

First you'll need commands which will build your program.
Inside the project this is the file `.vscode/tasks.json`:

:::{.column-margin}
The field `label` is the unique identifier for each, which is how dependency chains are handled in VS Code.
The six arguments match up with the script below.
:::

```{.json code-line-numbers="true"}
{
  "version": "2.0.0",
    "tasks": 
  [
    {
      "label": "cargo: build for aarch64",
      "type": "shell",
      "command": "cargo",
      "args": 
      [
        "build",
        "--target=aarch64-unknown-linux-gnu"
      ],

      "problemMatcher": 
      [
        "$rustc"
      ],

      "group":
      {
        "kind": "build",
        "isDefault": false
      }
    },



    {
      "label": "gdbserver: setup on remote",
      "type": "shell",
      "command": "${workspaceFolder}/gdbserver-setup.sh",
       
      "args":
      [
          "${workspaceFolder}",         // WS_FOLDER
          "rust-proj",                  // BIN_NAME
          "user",                       // REMOTE_USER
          "10.23.34.62",                // REMOTE_HOST
          "aarch64-unknown-linux-gnu",  // REMOTE_ARCH
          "2000"                        // GDB_PORT
      ],

      "group": 
      {
        "kind": "build",
        "isDefault": false
      },
      
      "dependsOn":
      [
        "cargo: build for aarch64",
      ],
    },
  ]
}
```

The script below is called on line 32 and should be saved as `gdbserver-setup.sh` in the root of your project folder.
Don't forget to do `chmod u+x` on it^[I may have been stuck on this point a little longer than I'm comfortable admitting.] or you'll get permission denied errors.

```{.bash code-line-numbers="true"}
#!/bin/bash

# Exit immediately if some variables are unset
set -o nounset
# Enable verbose tracing for debug purposes
set -o xtrace
WS_FOLDER="$1"
BIN_NAME="$2"
REMOTE_USER="$3"
REMOTE_HOST="$4"
REMOTE_ARCH="$5"
GDB_PORT="$6"
# Set target path
REMOTE_PATH="/home/${REMOTE_USER}/bin/debug"

# Set binary path to upload
BIN_PATH="${WS_FOLDER}/target/${REMOTE_ARCH}/debug/${BIN_NAME}"
# Kill previous debug sessions
ssh "${REMOTE_USER}@${REMOTE_HOST}" "killall gdbserver ${BIN_NAME}"
# Secure copy to the target device
scp "${BIN_PATH}" "${REMOTE_USER}@${REMOTE_HOST}:${REMOTE_PATH}"
# Start remote debug session
ssh -f "${REMOTE_USER}@${REMOTE_HOST}" "sh -c 'cd ${REMOTE_PATH}; nohup gdbserver :${GDB_PORT} ./${BIN_NAME} > ./console.log 2>&1 &'"
```
From line 14 and 17 you may notice that there are som directories that need to exist on the remote:

```{.default}
$ cd ~ && mkdir bin && mkdir bin/debug
```

@TODO: Finish with tasks.json and maybe a picture of the code running.