[
  {
    "objectID": "site/xcomp-rdbg.html",
    "href": "site/xcomp-rdbg.html",
    "title": "Cross Compilation & Manual Remote Debugging",
    "section": "",
    "text": "Note\n\n\n\nThis is written by a Manjaro user. The package names is a bit different for other distros. If you know some package names in other distros, please use the repos GitHub issues page to tell me about it."
  },
  {
    "objectID": "site/xcomp-rdbg.html#cross-compiling-the-binary",
    "href": "site/xcomp-rdbg.html#cross-compiling-the-binary",
    "title": "Cross Compilation & Manual Remote Debugging",
    "section": "Cross Compiling the Binary",
    "text": "Cross Compiling the Binary\nThis is written in 2024. Currently most desktop PCs/laptops are running x86_64 CPUs and when dealing with embedded Linux it’s mostly some version of ARM. That’s what we’re gonna set up the project for.\nFor a rust project Cargo.toml is the place for platform independent things, while .cargo/config.toml is for thins that are platform specific. Place these lines in .cargo/config.toml inside of your Rust repository.\n[target.aarch64-unknown-linux-gnu]\nlinker = \"aarch64-linux-gnu-gcc\"\n\n[build]\ntarget = \"aarch64-unknown-linux-gnu\"\n\n\nFor the compilation to work you need the ARM tools installed. On manjaro this can be acquired with pacman -S aarch64-linux-gnu-binutils aarch64-linux-gnu-gcc aarch64-linux-gnu-gdb aarch64-linux-gnu-glibc aarch64-linux-gnu-linux-api-headers.\nYou may also need aarch64-linux-gnu-pkg-config from AUR.\nWith this you should now be able to compile into an ARM binary with\n$ cargo build\nVerify that you have the binary, and check its size:\n$ ls -lh target/aarch64-unknown-linux-gnu/debug/"
  },
  {
    "objectID": "site/xcomp-rdbg.html#preparing-the-remote-debug-session",
    "href": "site/xcomp-rdbg.html#preparing-the-remote-debug-session",
    "title": "Cross Compilation & Manual Remote Debugging",
    "section": "Preparing the Remote Debug Session",
    "text": "Preparing the Remote Debug Session\n\nOn the Remote\nIf your using some sort of Ubuntu/Debian/Armbian systems then run\n$ sudo apt install gdbserver openssh-server\n\n\nOn the Host\nA version of Gdb which can handle the binary format of your target platform is needed. For Manjaro/Arch users it’s available as aarch64-linux-gnu-gdb."
  },
  {
    "objectID": "site/xcomp-rdbg.html#creating-a-session",
    "href": "site/xcomp-rdbg.html#creating-a-session",
    "title": "Cross Compilation & Manual Remote Debugging",
    "section": "Creating a Session",
    "text": "Creating a Session\nThe numbers used here match the the example session in the image at the bottom of the page.\n\nFirst the binary needs to get onto the remote:\n\n$ scp target/aarch64-unknown-linux-gnu/debug/rust-proj user@10.23.34.62:~/\n\nThen, in an ssh session to your remote machine, start a gdbserver session with the binary. 2000 is the port number.\n\n$ gdbserver :2000 ~/rust-proj\n\nLaunch gdb at the host, using the version matching your binaries format. The option --silent removes the start-up message.\n\n$ aarch64-linux-gnu-gdb target/aarch64-unknown-linux-gnu/debug/rust-proj --silent\n\nDon’t know what this is. Tried saying yes a few times, never seemed to work.\nSet up a breakpoint.\nRun to the breakpoint.\nNote that the execution is happening on the remote machine. If you let the program run to the end you’ll see the output of uname -a.\n\n\n\n\nThis is Rachel. Look at her. She clearly knows things."
  },
  {
    "objectID": "site/make-rust.html",
    "href": "site/make-rust.html",
    "title": "Rust Program + Some GDB",
    "section": "",
    "text": "Start by creating a new project and test it.\n$ cargo new rust-proj\n$ cd rust-proj\n$ cargo build\n$ cargo run"
  },
  {
    "objectID": "site/make-rust.html#project-creation",
    "href": "site/make-rust.html#project-creation",
    "title": "Rust Program + Some GDB",
    "section": "",
    "text": "Start by creating a new project and test it.\n$ cargo new rust-proj\n$ cd rust-proj\n$ cargo build\n$ cargo run"
  },
  {
    "objectID": "site/make-rust.html#spicing-up-the-program",
    "href": "site/make-rust.html#spicing-up-the-program",
    "title": "Rust Program + Some GDB",
    "section": "Spicing Up the Program",
    "text": "Spicing Up the Program\nTo get a good program we want some variables to inspect as well as a loop to try out stepping. Since this will eventually be a program executed on a remote machine, a line of code to reveal the machine running the code is useful.\nHere’s code for a function with a loop:\n\n\nA lot of what’s happening here is tricking rustc so that the function (and its name) won’t dissapear during compilation. Another concern is that if the a call like fact(5) is made in the code, that will probably get pre-calculated and a constant with the resulting numbers takes its place in the code.\n#[inline(never)]\nfn fact(n: i32) -&gt; i32\n{\n    let mut res: i32 = 1;\n    let mut i: i32 = 1;\n    while i &lt;= n\n    {\n        res *= i;\n        i   += 1;\n    }\n    res\n}\nIn order to generate a random int, start by adding this dependency to your Cargo.toml:\nrand = {version = \"0.8.5\", features = [\"std\", \"std_rng\"]}\nHere’s the complete the main file:\nuse std::process::Command;\n\nuse rand::Rng;\n\n\nfn main() \n{\n    let mut n = 5;\n    let mut s = fact(n);\n    println!(\"fact({}) is {}!\", n, s);\n\n    n = rand::thread_rng().gen_range(0..12);\n    s = fact(n);\n    println!(\"fact({}) is {}!\", n, s);\n\n    let output = if cfg!(target_os = \"windows\")\n    {\n        Command::new(\"cmd\")\n            .args([\"/C\", \"echo hello\"])\n            .output()\n            .expect(\"failed to execute process\")\n    } \n    else\n    {\n        Command::new(\"sh\")\n            .arg(\"-c\")\n            .arg(\"uname -m\")\n            .output()\n            .expect(\"failed to execute process\")\n    };\n    \n    println!(\"uname -m was {}\", String::from_utf8_lossy(&output.stdout));\n}\n\n\n#[inline(never)]\nfn fact(n: i32) -&gt; i32\n{\n    let mut res: i32 = 1;\n    let mut i: i32 = 1;\n    while i &lt;= n\n    {\n        res *= i;\n        i   += 1;\n    }\n    res\n}\nIn case you won’t be cross compiling you could replace the call to uname with something like ip a | grep \"inet \"; Anything printable with which you can quickly tell that you’re actually doing remote execution.\n\n\n\n\n\n\nTL;DR\n\n\n\nThe remainder of this chapter is hand-holding through baby’s first gdb session. If you don’t think you need this experience, just skip to the next chapter."
  },
  {
    "objectID": "site/make-rust.html#trying-out-gdb",
    "href": "site/make-rust.html#trying-out-gdb",
    "title": "Rust Program + Some GDB",
    "section": "Trying out gdb",
    "text": "Trying out gdb\nFor the final setup we’ll use lldb but for now let’s stick with normal gdb. Install it for your system, if you haven’t already.\n\n\n\n\n\n\n\n\nTip\n\n\n\nScroll down to the list of numbers. There you can click the numbers and have the corresponding annotated line get highlighted.\n\n\nHere’s a a gdb session with much of the fluff cut out, marked by &lt;...&gt;.\nsasja@ed800:~/rust-proj$ ls\nCargo.lock  Cargo.toml  src  target\n\n1sasja@ed800:~/rust-proj$ gdb\nGNU gdb (GDB) 15.1\n&lt;...&gt;\n\n2(gdb) file target/debug/rust-proj\nReading symbols from target/debug/rust-proj...\n&lt;...&gt;\n\n3(gdb) l\n1   fn main() {\n2       println!(\"Hello, world!\");\n3   }\n\n4(gdb) b 2\nBreakpoint 1 at 0x77c4: file src/main.rs, line 2.\n\n5(gdb) run\nStarting program: \n    /home/sasja/rust-proj/target/debug/rust-proj\n&lt;...&gt;\n6Enable debuginfod for this session? (y or [n])\n&lt;...&gt;\n\nBreakpoint 1, rust_proj::main () at src/main.rs:2\n2       println!(\"Hello, world!\");\n\n7(gdb) c\nContinuing.\nHello, world!\n[Inferior 1 (process 117903) exited normally]\n\n8(gdb) exit\nsasja@ed800:~/rust-proj$\n\n1\n\nStart gdb, without any arguments.\n\n2\n\nPoint to your binary.\n\n3\n\nl is for list. Gives you all the code, making it possible for you to know what the actual line numbers are.\n\n4\n\nb for breakpoint, sets a breakpoint on line 2, given the numbering shown above.\n\n5\n\nStart the program.\n\n6\n\nJust press ENTER to make this question go away.\n\n7\n\nThe execution has reached a breakpoint. Using c will make the program resume execution.\n\n8\n\nKill gdb."
  },
  {
    "objectID": "site/make-rust.html#testing-it-out",
    "href": "site/make-rust.html#testing-it-out",
    "title": "Rust Program + Some GDB",
    "section": "Testing It Out",
    "text": "Testing It Out\nCompile the program and load it into gdb as before. To see that it’s all there you can run.\n(gdb) set listsize 50\n(gdb) list\n\n\nIf you just run list main you will get an empty response, or perhaps assembly code. This is because main is the word for the very first code that gets run, even before your program starts. In this case it’s a set of instructions added by rustc.\nWhat you think of as main is actually rust_proj::main. To test this, run list rust_proj::fact.\nUse the list below to get a grip on what’s possible to do.\n\nList of gdb Example Commands\n\n(gdb) set listsize 50\n\nShow 50 lines at a time when using list.\n\n(gdb) b 10\n\nSet a breakpoint on line 10.\n\n(gdb) i b\n\nList information on all the current breakpoints.\n\n(gdb) d 1-3\n\nDelete breakpoints 1 to 3.\n\n(gdb) dis 1-3 5\n\nTemporarily disable breakpoints 1 to 3.\n\n(gdb) d b\n\nDelete all breakpoints.\n\n(gdb) en 2 4\n\nEnable the disabled breakpoints 2 and 4.\n\n(gdb) c\n\nContinue until next breakpoint.\n\n(gdb) p i\n\nPrint the current value of the variable i.\n\n(gdb) p my_struct.field\n\nPrint the value of the field field in variable my_struct.\n\n(gdb) backtrace\n\nView the current call stack.\n\n(gdb) set var i = 5\n\nChange the value of a variable.\n\n(gdb) s\n\nStep into function.\n\n(gdb) n\n\nNext line of code. Doesn’t go into function.\n\n(gdb) fin\n\nSteps out of a function."
  },
  {
    "objectID": "site/index.html",
    "href": "site/index.html",
    "title": "Overview",
    "section": "",
    "text": "HERE is the link to the repository. The Rust projects code is available there, in the rust-proj directory.\nThis tutorial will guide you through the steps needed to set up a remote debugging session of a rust program from within VS Code.\nOn the way there be some introductory guides to using gdb, the GNU Debugger, as well as setting up a remote session with it. This is because VS Code will make use of a gdbserver, so it’s best to make sure it works before you go on to the VS Code configuration.\nThe tutorial chapters are available through the top menu/hamburger button."
  },
  {
    "objectID": "site/vscode-setup.html",
    "href": "site/vscode-setup.html",
    "title": "VS Code Setup",
    "section": "",
    "text": "You don’t need any of Microsofts Remote Development extensions. Those are for working with source code that’s on another machine.\nThe extensions you need are\n\n\nYou may be thinking “Why LLDB? I thought we were using GDB?”. GDB is essentially a hack and LLDB just happens to be compatible with that hack so, for our purposes, it’s essentially the same thing.\n\nrust-analyzer (rust-lang.rust-analyzer)\nCodeLLDB (vadimcn.vscode-lldb)"
  },
  {
    "objectID": "site/vscode-setup.html#vs-code-extensions",
    "href": "site/vscode-setup.html#vs-code-extensions",
    "title": "VS Code Setup",
    "section": "",
    "text": "You don’t need any of Microsofts Remote Development extensions. Those are for working with source code that’s on another machine.\nThe extensions you need are\n\n\nYou may be thinking “Why LLDB? I thought we were using GDB?”. GDB is essentially a hack and LLDB just happens to be compatible with that hack so, for our purposes, it’s essentially the same thing.\n\nrust-analyzer (rust-lang.rust-analyzer)\nCodeLLDB (vadimcn.vscode-lldb)"
  },
  {
    "objectID": "site/vscode-setup.html#tasks",
    "href": "site/vscode-setup.html#tasks",
    "title": "VS Code Setup",
    "section": "Tasks",
    "text": "Tasks\nFirst you’ll need commands which will build your program. Inside the project this is the file .vscode/tasks.json:\n\n\nThe field label is the unique identifier for each, which is how dependency chains are handled in VS Code. The six arguments match up with the script below.\n{\n  \"version\": \"2.0.0\",\n    \"tasks\": \n  [\n    {\n      \"label\": \"cargo: build for aarch64\",\n      \"type\": \"shell\",\n      \"command\": \"cargo\",\n      \"args\": \n      [\n        \"build\",\n        \"--target=aarch64-unknown-linux-gnu\"\n      ],\n\n      \"problemMatcher\": \n      [\n        \"$rustc\"\n      ],\n\n      \"group\":\n      {\n        \"kind\": \"build\",\n        \"isDefault\": false\n      }\n    },\n\n\n    \n    {\n      \"label\": \"gdbserver: setup on remote\",\n      \"type\": \"shell\",\n      \"command\": \"${workspaceFolder}/gdbserver-setup.sh\",\n       \n      \"args\":\n      [\n          \"${workspaceFolder}\",         // WS_FOLDER\n          \"rust-proj\",                  // APP_NAME\n          \"user\",                       // REMOTE_USER\n          \"10.23.34.62\",                // REMOTE_HOST\n          \"aarch64-unknown-linux-gnu\",  // REMOTE_ARCH\n          \"2000\"                        // GDB_PORT\n      ],\n\n      \"group\": \n      {\n        \"kind\": \"build\",\n        \"isDefault\": false\n      },\n      \n      \"dependsOn\":\n      [\n        \"cargo: build for aarch64\",\n      ],\n    },\n  ]\n}"
  },
  {
    "objectID": "site/vscode-setup.html#gdb-server-launcher-script",
    "href": "site/vscode-setup.html#gdb-server-launcher-script",
    "title": "VS Code Setup",
    "section": "GDB Server Launcher Script",
    "text": "GDB Server Launcher Script\nThe script below is called on line 32 and should be saved as gdbserver-setup.sh in the root of your project folder. Don’t forget to do chmod u+x on it1 or you’ll get permission denied errors.\n1 I may have been stuck on this point a little longer than I’m comfortable admitting.#!/bin/bash\n\n# Exit immediately if some variables are unset\nset -o nounset\n# Enable verbose tracing for debug purposes\nset -o xtrace\nWS_FOLDER=\"$1\"\nBIN_NAME=\"$2\"\nREMOTE_USER=\"$3\"\nREMOTE_HOST=\"$4\"\nREMOTE_ARCH=\"$5\"\nGDB_PORT=\"$6\"\n\n# Set target path\nREMOTE_PATH=\"/home/${REMOTE_USER}/bin/debug\"\n\n# Set binary path to upload\nBIN_PATH=\"${WS_FOLDER}/target/${REMOTE_ARCH}/debug/${BIN_NAME}\"\n# Kill previous debug sessions\nssh \"${REMOTE_USER}@${REMOTE_HOST}\" \"killall gdbserver ${BIN_NAME}\"\n# Secure copy to the target device\nscp \"${BIN_PATH}\" \"${REMOTE_USER}@${REMOTE_HOST}:${REMOTE_PATH}\"\n# Start remote debug session\nssh -f \"${REMOTE_USER}@${REMOTE_HOST}\" \"sh -c 'cd ${REMOTE_PATH}; nohup gdbserver :${GDB_PORT} ./${BIN_NAME} &gt; ./console.log 2&gt;&1 &'\"\nFrom line 14 and 17 you may notice that there are som directories that need to exist on the remote:\n$ cd ~ && mkdir bin && mkdir bin/debug"
  },
  {
    "objectID": "site/vscode-setup.html#launchers",
    "href": "site/vscode-setup.html#launchers",
    "title": "VS Code Setup",
    "section": "Launchers",
    "text": "Launchers\nThis is the file .vscode/launch.json:\n{\n  \"version\": \"0.2.0\",\n  \"configurations\":\n  [\n    {\n      \"type\": \"lldb\",\n      \"request\": \"launch\",\n      \"name\": \"Debug executable 'rust-proj'\",\n      \"cargo\":\n      {\n        \"args\":\n        [\n          \"build\",\n          \"--bin=rust-proj\",\n          \"--package=rust-proj\"\n        ],\n\n        \"filter\":\n        {\n          \"name\": \"rust-proj\",\n          \"kind\": \"bin\"\n        }\n      },\n      \"args\": [],\n      \"cwd\": \"${workspaceFolder}\"\n    },\n\n\n    {\n      \"type\": \"lldb\",\n      \"request\": \"launch\",\n      \"name\": \"Debug unit tests in executable 'rust-proj'\",\n      \"cargo\":\n      {\n        \"args\":\n        [\n          \"test\",\n          \"--no-run\",\n          \"--bin=rust-proj\",\n          \"--package=rust-proj\"\n        ],\n        \"filter\":\n        {\n          \"name\": \"rust-proj\",\n          \"kind\": \"bin\"\n        }\n      },\n      \"args\": [],\n      \"cwd\": \"${workspaceFolder}\"\n    },\n\n    // Below is the part that we'll use for remote debug\n    {\n      \"type\": \"lldb\",\n      \"request\": \"custom\",\n      \"name\": \"Embedded Linux Remote Debug\",\n      \"preLaunchTask\": \"gdbserver: setup on remote\",\n      \"targetCreateCommands\": [\"target create ${workspaceFolder}/target/aarch64-unknown-linux-gnu/debug/rust-proj\"],\n      \"processCreateCommands\": [\"gdb-remote 10.23.34.62:2000\"]\n    }\n  ]\n}"
  },
  {
    "objectID": "site/vscode-setup.html#making-things-simpler",
    "href": "site/vscode-setup.html#making-things-simpler",
    "title": "VS Code Setup",
    "section": "Making Things Simpler",
    "text": "Making Things Simpler\nIt can be quite annoying to have to enter the the remotes password three times for every debug session.\nTo get around this, use the command ssh-copy-id to install your public key onto the remote machine:\n$ ssh-copy-id user@10.23.34.62\n\nAs it’s said in the picture, try logging in to the machine with ssh again. If it all worked out you should no longer need to input the password each time."
  }
]